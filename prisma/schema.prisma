generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLINIC
  LAB
}

enum CaseStatus {
  NEW
  ACCEPTED
  IN_PROGRESS  // Keep temporarily for migration
  DESIGNING
  READY
  DISPATCHED
  DELIVERED
  CANCELLED
  REJECTED
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role
  clinic    Clinic?
  lab       Lab?
  messages  Message[] // Messages sent by this user
  clinicReviews Review[] @relation("ClinicReviews") // Reviews written by clinic users
  labReviews Review[] @relation("LabReviews") // Reviews received by lab users
  createdAt DateTime @default(now())
}

model Clinic {
  id          String        @id @default(uuid())
  name        String
  phone       String?
  address     String?
  specialties String[]
  cases       Case[]
  favorites   FavoriteLab[] // Favorite labs
  user        User          @relation(fields: [userId], references: [id])
  userId      String        @unique
}

model Lab {
  id              String        @id @default(uuid())
  name            String
  services        String[]
  specialties     String[]      // ["crowns", "aligners", "dentures"]
  turnaroundTime  Int           // in days
  location        String?
  latitude        Float?
  longitude       Float?
  rating          Float         @default(0)
  logo            String?
  cases           Case[]
  favorites       FavoriteLab[] // Labs favorited by clinics
  user            User          @relation(fields: [userId], references: [id])
  userId          String        @unique
}

model Case {
  id            String     @id @default(uuid())
  title         String
  description   String?
  caseNotes     String?
  toothNumber   String?
  status        CaseStatus @default(NEW)
  statusHistory Json?      // Array of status change objects with timestamps
  clinic        Clinic     @relation(fields: [clinicId], references: [id])
  lab           Lab?       @relation(fields: [labId], references: [id])
  clinicId      String
  labId         String?
  files         File[]     // Relation to File model
  messages      Message[]  // Messages for case communication
  review        Review?    // One review per case
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model File {
  id         String   @id @default(uuid())
  filename   String
  originalName String
  filePath   String
  fileType   String
  fileSize   Int
  caseId     String
  uploadedAt DateTime @default(now())
  case       Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(uuid())
  caseId    String   @unique // One review per case
  clinicId  String
  labId     String
  rating    Int      // 1 to 5
  comment   String?  // Optional review comment
  timestamp DateTime @default(now())

  clinic    User     @relation("ClinicReviews", fields: [clinicId], references: [id])
  lab       User     @relation("LabReviews", fields: [labId], references: [id])
  case      Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  email     String   @unique
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model FavoriteLab {
  id        String   @id @default(uuid())
  clinic    Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  lab       Lab      @relation(fields: [labId], references: [id], onDelete: Cascade)
  clinicId  String
  labId     String
  createdAt DateTime @default(now())
  
  @@unique([clinicId, labId]) // Prevent duplicate favorites
}

model Message {
  id        String   @id @default(uuid())
  caseId    String
  senderId  String
  content   String
  timestamp DateTime @default(now())

  case   Case @relation(fields: [caseId], references: [id], onDelete: Cascade)
  sender User @relation(fields: [senderId], references: [id])
} 